import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id "com.github.fudge.forgedflowerloom" version "2.0.0"
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

dependencies {
	// Fabric Dependencies
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Mod Dependencies
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

tasks.remapJar {
	afterEvaluate {
		addNestedDependencies = false
		archiveClassifier.set("slim")
	}
}

task remapStandaloneJar(type: RemapJarTask, dependsOn: jar) {
	afterEvaluate {
		input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
		archiveName = "${archivesBaseName}-${version}-fat.jar"
		addNestedDependencies = true
	}
}

curseforge {
	// Stored in ~/.gradle/gradle.properties
	if (project.hasProperty('curseApiKey'))
		apiKey = project.curseApiKey
	else if (System.getenv("CURSE_API_KEY") != null)
		apiKey = System.getenv("CURSE_API_KEY")
	else
		println 'No CurseForge API key found, \'curseforge\' tasks will not work'

	project {
		id = project.curseforge_id
		releaseType = 'release'

		addGameVersion project.minecraft_version
		addGameVersion 'Fabric'

		changelogType = 'markdown'
		changelog = '' // TODO: automatically get changelog for version

		relations {
			requiredDependency 'fabric-api'
			// requiredDependency 'cloth-config'
			// optionalDependency 'modmenu'
		}

		mainArtifact(remapStandaloneJar) {
			displayName = "v$project.version"
			relations {
				// Override a relation if it's embedded
				// embeddedLibrary 'cloth-config'
			}
		}
		addArtifact remapJar
	}
	options {
		forgeGradleIntegration = false
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// Select the repositories you want to publish to
	// To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
	repositories {
		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	}
}
